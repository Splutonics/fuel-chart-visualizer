# Input: Slider for the Pressure Altitude ----
sliderInput(inputId = "PA",
label = "Pressure Altitude",
min = min(uPA),
max = max(uPA),
value = min(uPA),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(uPA))
),
# Input: Slider for the Temperature ----
sliderInput(inputId = "delT",
label = "Temperature from Standard",
min = min(udelT),
max = max(udelT),
value = median(udelT),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(udelT))
),
# Input: Slider for another input ----
sliderInput(inputId = "drag",
label = "Drag Index",
min = 0,
max = 200,
value = 0
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "examplePlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automaticallyrunExample("03_reactivity")
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$examplePlot <- renderPlot({
#    x    <- faithful$waiting
#    bins <- seq(min(x), max(x), length.out = input$bins + 1)
x <- filter(CPD,CPD$PA == input$PA & CPD$deltaT == input$delT)
explot <- ggplot(x,aes(x$KTAS, x$GPH), xlab =  ) + geom_line(color = "blue")
explot <- explot + scale_x_continuous(limits = c(min(CPD$KTAS)-1,max(CPD$KTAS)+1))
explot <- explot + scale_y_continuous(limits = c(0,max(CPD$GPH)+0.5))
explot <- explot + labs(x = "KTAS", y = "Gallons Per Hour", title = paste(c("Fuel Flow for",as.character( input$PA),"ft")))
print(explot)
#    hist(x, breaks = bins, col = "#75AADB", border = "white",
#         xlab = "Waiting time to next eruption (in mins)",
#         main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# This loads the shiny and readxl add on
library(shiny)
library(tidyverse)
library(readxl)
#This sets the working directory to this location
setwd('C:/Users/jonfr/Desktop/Coding/R')
#Read and assigns data to variaible CPD
CPD <- read_excel("Cessna Performance Data.xlsx")
#Creates a vector of unqiue Pressue Altitudes
uPA <- unique(CPD$PA)
udelT <- unique(CPD$deltaT)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Cessna Performance Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the Pressure Altitude ----
sliderInput(inputId = "PA",
label = "Pressure Altitude",
min = min(uPA),
max = max(uPA),
value = min(uPA),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(uPA))
),
# Input: Slider for the Temperature ----
sliderInput(inputId = "delT",
label = "Temperature from Standard",
min = min(udelT),
max = max(udelT),
value = median(udelT),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(udelT))
),
# Input: Slider for another input ----
sliderInput(inputId = "drag",
label = "Drag Index",
min = 0,
max = 200,
value = 0
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "examplePlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automaticallyrunExample("03_reactivity")
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$examplePlot <- renderPlot({
#    x    <- faithful$waiting
#    bins <- seq(min(x), max(x), length.out = input$bins + 1)
x <- filter(CPD,CPD$PA == input$PA & CPD$deltaT == input$delT)
explot <- ggplot(x,aes(x$KTAS, x$GPH)) + geom_line(color = "blue")
explot <- explot + scale_x_continuous(limits = c(min(CPD$KTAS)-1,max(CPD$KTAS)+1))
explot <- explot + scale_y_continuous(limits = c(0,max(CPD$GPH)+0.5))
explot <- explot + labs(x = "KTAS", y = "Gallons Per Hour", title = "Fuel Flow")
print(explot)
#    hist(x, breaks = bins, col = "#75AADB", border = "white",
#         xlab = "Waiting time to next eruption (in mins)",
#         main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# This loads the shiny and readxl add on
library(shiny)
library(tidyverse)
library(readxl)
#This sets the working directory to this location
setwd('C:/Users/jonfr/Desktop/Coding/R')
#Read and assigns data to variaible CPD
CPD <- read_excel("Cessna Performance Data.xlsx")
#Creates a vector of unqiue Pressue Altitudes
uPA <- unique(CPD$PA)
udelT <- unique(CPD$deltaT)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Cessna Performance Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the Pressure Altitude ----
sliderInput(inputId = "PA",
label = "Pressure Altitude",
min = min(uPA),
max = max(uPA),
value = min(uPA),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(uPA))
),
# Input: Slider for the Temperature ----
sliderInput(inputId = "delT",
label = "Temperature from Standard",
min = min(udelT),
max = max(udelT),
value = median(udelT),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(udelT))
),
# Input: Slider for another input ----
sliderInput(inputId = "drag",
label = "Drag Index",
min = 0,
max = 200,
value = 0
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "examplePlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automaticallyrunExample("03_reactivity")
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$examplePlot <- renderPlot({
#    x    <- faithful$waiting
#    bins <- seq(min(x), max(x), length.out = input$bins + 1)
x <- filter(CPD,CPD$PA == input$PA & CPD$deltaT == input$delT)
explot <- ggplot(x,aes(x$KTAS, x$GPH)) + geom_line(color = "blue")
explot <- explot + scale_x_continuous(limits = c(min(CPD$KTAS)-1,max(CPD$KTAS)+1))
explot <- explot + scale_y_continuous(limits = c(0,round(max(CPD$GPH)),digits = 2)
explot <- explot + labs(x = "KTAS", y = "Gallons Per Hour", title = "Fuel Flow")
# This loads the shiny and readxl add on
library(shiny)
library(tidyverse)
library(readxl)
#This sets the working directory to this location
setwd('C:/Users/jonfr/Desktop/Coding/R')
#Read and assigns data to variaible CPD
CPD <- read_excel("Cessna Performance Data.xlsx")
#Creates a vector of unqiue Pressue Altitudes
uPA <- unique(CPD$PA)
udelT <- unique(CPD$deltaT)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Cessna Performance Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the Pressure Altitude ----
sliderInput(inputId = "PA",
label = "Pressure Altitude",
min = min(uPA),
max = max(uPA),
value = min(uPA),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(uPA))
),
# Input: Slider for the Temperature ----
sliderInput(inputId = "delT",
label = "Temperature from Standard",
min = min(udelT),
max = max(udelT),
value = median(udelT),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(udelT))
),
# Input: Slider for another input ----
sliderInput(inputId = "drag",
label = "Drag Index",
min = 0,
max = 200,
value = 0
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "examplePlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automaticallyrunExample("03_reactivity")
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$examplePlot <- renderPlot({
#    x    <- faithful$waiting
#    bins <- seq(min(x), max(x), length.out = input$bins + 1)
x <- filter(CPD,CPD$PA == input$PA & CPD$deltaT == input$delT)
explot <- ggplot(x,aes(x$KTAS, x$GPH)) + geom_line(color = "blue")
explot <- explot + scale_x_continuous(limits = c(min(CPD$KTAS)-1,max(CPD$KTAS)+1))
explot <- explot + scale_y_continuous(limits = c(0,round(max(CPD$GPH),digits = 2)
explot <- explot + labs(x = "KTAS", y = "Gallons Per Hour", title = "Fuel Flow")
round(9.5, digits = 2)
round(9.5, digits = 1)
round(9.5)
?round
ceiling(9.5)
ceiling(11)
ceiling(10.1)
trunc(9.5)
# This loads the shiny and readxl add on
library(shiny)
library(tidyverse)
library(readxl)
#This sets the working directory to this location
setwd('C:/Users/jonfr/Desktop/Coding/R')
#Read and assigns data to variaible CPD
CPD <- read_excel("Cessna Performance Data.xlsx")
#Creates a vector of unqiue Pressue Altitudes
uPA <- unique(CPD$PA)
udelT <- unique(CPD$deltaT)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Cessna Performance Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the Pressure Altitude ----
sliderInput(inputId = "PA",
label = "Pressure Altitude",
min = min(uPA),
max = max(uPA),
value = min(uPA),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(uPA))
),
# Input: Slider for the Temperature ----
sliderInput(inputId = "delT",
label = "Temperature from Standard",
min = min(udelT),
max = max(udelT),
value = median(udelT),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(udelT))
),
# Input: Slider for another input ----
sliderInput(inputId = "drag",
label = "Drag Index",
min = 0,
max = 200,
value = 0
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "examplePlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automaticallyrunExample("03_reactivity")
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$examplePlot <- renderPlot({
#    x    <- faithful$waiting
#    bins <- seq(min(x), max(x), length.out = input$bins + 1)
x <- filter(CPD,CPD$PA == input$PA & CPD$deltaT == input$delT)
explot <- ggplot(x,aes(x$KTAS, x$GPH)) + geom_line(color = "blue")
explot <- explot + scale_x_continuous(limits = c(min(CPD$KTAS)-1,max(CPD$KTAS)+1))
explot <- explot + scale_y_continuous(limits = c(0,ceiling(max(CPD$GPH))
explot <- explot + labs(x = "KTAS", y = "Gallons Per Hour", title = "Fuel Flow")
# This loads the shiny and readxl add on
library(shiny)
library(tidyverse)
library(readxl)
#This sets the working directory to this location
setwd('C:/Users/jonfr/Desktop/Coding/R')
#Read and assigns data to variaible CPD
CPD <- read_excel("Cessna Performance Data.xlsx")
#Creates a vector of unqiue Pressue Altitudes
uPA <- unique(CPD$PA)
udelT <- unique(CPD$deltaT)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Cessna Performance Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the Pressure Altitude ----
sliderInput(inputId = "PA",
label = "Pressure Altitude",
min = min(uPA),
max = max(uPA),
value = min(uPA),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(uPA))
),
# Input: Slider for the Temperature ----
sliderInput(inputId = "delT",
label = "Temperature from Standard",
min = min(udelT),
max = max(udelT),
value = median(udelT),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(udelT))
),
# Input: Slider for another input ----
sliderInput(inputId = "drag",
label = "Drag Index",
min = 0,
max = 200,
value = 0
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "examplePlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automaticallyrunExample("03_reactivity")
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$examplePlot <- renderPlot({
#    x    <- faithful$waiting
#    bins <- seq(min(x), max(x), length.out = input$bins + 1)
x <- filter(CPD,CPD$PA == input$PA & CPD$deltaT == input$delT)
explot <- ggplot(x,aes(x$KTAS, x$GPH)) + geom_line(color = "blue")
explot <- explot + scale_x_continuous(limits = c(min(CPD$KTAS)-1,max(CPD$KTAS)+1))
explot <- explot + scale_y_continuous(limits = c(0,ceiling(max(CPD$GPH)))
explot <- explot + labs(x = "KTAS", y = "Gallons Per Hour", title = "Fuel Flow")
# This loads the shiny and readxl add on
library(shiny)
library(tidyverse)
library(readxl)
#This sets the working directory to this location
setwd('C:/Users/jonfr/Desktop/Coding/R')
#Read and assigns data to variaible CPD
CPD <- read_excel("Cessna Performance Data.xlsx")
#Creates a vector of unqiue Pressue Altitudes
uPA <- unique(CPD$PA)
udelT <- unique(CPD$deltaT)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Cessna Performance Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the Pressure Altitude ----
sliderInput(inputId = "PA",
label = "Pressure Altitude",
min = min(uPA),
max = max(uPA),
value = min(uPA),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(uPA))
),
# Input: Slider for the Temperature ----
sliderInput(inputId = "delT",
label = "Temperature from Standard",
min = min(udelT),
max = max(udelT),
value = median(udelT),
#this should set the step size to interval size.
# make this throw an error in functional version
step = unique(diff(udelT))
),
# Input: Slider for another input ----
sliderInput(inputId = "drag",
label = "Drag Index",
min = 0,
max = 200,
value = 0
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "examplePlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automaticallyrunExample("03_reactivity")
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$examplePlot <- renderPlot({
#    x    <- faithful$waiting
#    bins <- seq(min(x), max(x), length.out = input$bins + 1)
x <- filter(CPD,CPD$PA == input$PA & CPD$deltaT == input$delT)
explot <- ggplot(x,aes(x$KTAS, x$GPH)) + geom_line(color = "blue")
explot <- explot + scale_x_continuous(limits = c(min(CPD$KTAS)-1,max(CPD$KTAS)+1))
explot <- explot + scale_y_continuous(limits = c(0,ceiling(max(CPD$GPH))))
explot <- explot + labs(x = "KTAS", y = "Gallons Per Hour", title = "Fuel Flow")
print(explot)
#    hist(x, breaks = bins, col = "#75AADB", border = "white",
#         xlab = "Waiting time to next eruption (in mins)",
#         main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny); runApp('C:/Users/jonfr/Desktop/Coding/R/Chart Reader.R')
runApp('C:/Users/jonfr/Desktop/Coding/R/Chart Reader.R')
runApp('C:/Users/jonfr/Desktop/Coding/R/Chart Reader.R')
runApp('C:/Users/jonfr/Desktop/Coding/R/Chart Reader.R')
runApp('C:/Users/jonfr/Desktop/Coding/R/Chart Reader.R')
citation()
library(shiny); runApp('C:/Users/jonfr/Desktop/Coding/R/Chart Reader.R')
library(shiny); runApp('C:/Users/jonfr/Desktop/Coding/R/Chart Reader.R')
runApp('C:/Users/jonfr/Desktop/Coding/R/Chart Reader.R')
